# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class BodyMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_id=None, email=None, name=None, message=None):  # noqa: E501
        """BodyMessage - a model defined in OpenAPI

        :param user_id: The user_id of this BodyMessage.  # noqa: E501
        :type user_id: str
        :param email: The email of this BodyMessage.  # noqa: E501
        :type email: str
        :param name: The name of this BodyMessage.  # noqa: E501
        :type name: str
        :param message: The message of this BodyMessage.  # noqa: E501
        :type message: str
        """
        self.openapi_types = {
            'user_id': str,
            'email': str,
            'name': str,
            'message': str
        }

        self.attribute_map = {
            'user_id': 'user_id',
            'email': 'email',
            'name': 'name',
            'message': 'message'
        }

        self._user_id = user_id
        self._email = email
        self._name = name
        self._message = message

    @classmethod
    def from_dict(cls, dikt) -> 'BodyMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_object of this BodyMessage.  # noqa: E501
        :rtype: BodyMessage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self):
        """Gets the user_id of this BodyMessage.

        Identification of a user.  # noqa: E501

        :return: The user_id of this BodyMessage.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this BodyMessage.

        Identification of a user.  # noqa: E501

        :param user_id: The user_id of this BodyMessage.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def email(self):
        """Gets the email of this BodyMessage.

        Email format.  # noqa: E501

        :return: The email of this BodyMessage.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this BodyMessage.

        Email format.  # noqa: E501

        :param email: The email of this BodyMessage.
        :type email: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this BodyMessage.


        :return: The name of this BodyMessage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BodyMessage.


        :param name: The name of this BodyMessage.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def message(self):
        """Gets the message of this BodyMessage.


        :return: The message of this BodyMessage.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this BodyMessage.


        :param message: The message of this BodyMessage.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message
