# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_id=None, name=None, email=None, phone_number=None, registered_time=None, delivery_tokens=None, etransfer_email=None):  # noqa: E501
        """User - a model defined in OpenAPI

        :param user_id: The user_id of this User.  # noqa: E501
        :type user_id: str
        :param name: The name of this User.  # noqa: E501
        :type name: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param phone_number: The phone_number of this User.  # noqa: E501
        :type phone_number: str
        :param delivery_tokens: The delivery_tokens of this User.  # noqa: E501
        :type delivery_tokens: int
        :param etransfer_email: The etransfer_email of this User.  # noqa: E501
        :type etransfer_email: str
        """
        self.openapi_types = {
            'user_id': str,
            'name': str,
            'email': str,
            'phone_number': str,
            'registered_time', str,
            'delivery_tokens': int,
            'etransfer_email': str
        }

        self.attribute_map = {
            'user_id': 'user_id',
            'name': 'name',
            'email': 'email',
            'phone_number': 'phone_number',
            'registered_time': 'registered_time',
            'delivery_tokens': 'delivery_tokens',
            'etransfer_email': 'etransfer_email'
        }

        self._user_id = user_id
        self._name = name
        self._email = email
        self._phone_number = phone_number
        self._registered_time = registered_time
        self._delivery_tokens = delivery_tokens
        self._etransfer_email = etransfer_email

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self):
        """Gets the user_id of this User.

        Identification of a user.  # noqa: E501

        :return: The user_id of this User.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this User.

        Identification of a user.  # noqa: E501

        :param user_id: The user_id of this User.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def name(self):
        """Gets the name of this User.

        User's display name.  # noqa: E501

        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

        User's display name.  # noqa: E501

        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def email(self):
        """Gets the email of this User.

        Email format.  # noqa: E501

        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        Email format.  # noqa: E501

        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def phone_number(self):
        """Gets the phone_number of this User.

        Phone number format.  # noqa: E501

        :return: The phone_number of this User.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this User.

        Phone number format.  # noqa: E501

        :param phone_number: The phone_number of this User.
        :type phone_number: str
        """
        if phone_number is not None and not re.search(r'^\d{10}$', phone_number):  # noqa: E501
            raise ValueError("Invalid value for `phone_number`, must be a follow pattern or equal to `/^\d{10}$/`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def registered_time(self):
        """Gets the registered_time of this User.


        :return: The registered_time of this User.
        :rtype: str
        """
        return self._registered_time

    @registered_time.setter
    def registered_time(self, registered_time):
        """Sets the registered_time of this User.


        :param registered_time: The registered_time of this User.
        :type registered_time: str
        """

        self._registered_time = registered_time

    @property
    def delivery_tokens(self):
        """Gets the delivery_tokens of this User.

        Delivery token count.  # noqa: E501

        :return: The delivery_tokens of this User.
        :rtype: int
        """
        return self._delivery_tokens

    @delivery_tokens.setter
    def delivery_tokens(self, delivery_tokens):
        """Sets the delivery_tokens of this User.

        Delivery token count.  # noqa: E501

        :param delivery_tokens: The delivery_tokens of this User.
        :type delivery_tokens: int
        """

        self._delivery_tokens = delivery_tokens

    @property
    def etransfer_email(self):
        """Gets the etransfer_email of this User.

        Email format.  # noqa: E501

        :return: The etransfer_email of this User.
        :rtype: str
        """
        return self._etransfer_email

    @etransfer_email.setter
    def etransfer_email(self, etransfer_email):
        """Sets the etransfer_email of this User.

        Email format.  # noqa: E501

        :param etransfer_email: The etransfer_email of this User.
        :type etransfer_email: str
        """

        self._etransfer_email = etransfer_email
