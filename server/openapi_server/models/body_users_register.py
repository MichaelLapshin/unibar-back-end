# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util, format

import re  # noqa: E501

class BodyUsersRegister(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email=None, password=None, name=None, phone_number=None):  # noqa: E501
        """BodyUsersRegister - a model defined in OpenAPI

        :param email: The email of this BodyUsersRegister.  # noqa: E501
        :type email: str
        :param password: The password of this BodyUsersRegister.  # noqa: E501
        :type password: str
        :param name: The name of this BodyUsersRegister.  # noqa: E501
        :type name: str
        :param phone_number: The phone_number of this BodyUsersRegister.  # noqa: E501
        :type phone_number: str
        """
        self.openapi_types = {
            'email': str,
            'password': str,
            'name': str,
            'phone_number': str
        }

        self.attribute_map = {
            'email': 'email',
            'password': 'password',
            'name': 'name',
            'phone_number': 'phone_number'
        }

        format.enforce_password(password)
        format.enforce_phone_number(phone_number)

        self._email = email
        self._password = password
        self._name = name
        self._phone_number = phone_number

    @classmethod
    def from_dict(cls, dikt) -> 'BodyUsersRegister':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_object_1 of this BodyUsersRegister.  # noqa: E501
        :rtype: BodyUsersRegister
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this BodyUsersRegister.

        Email format.  # noqa: E501

        :return: The email of this BodyUsersRegister.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this BodyUsersRegister.

        Email format.  # noqa: E501

        :param email: The email of this BodyUsersRegister.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def password(self):
        """Gets the password of this BodyUsersRegister.

        Password format.  # noqa: E501

        :return: The password of this BodyUsersRegister.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this BodyUsersRegister.

        Password format.  # noqa: E501

        :param password: The password of this BodyUsersRegister.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        format.enforce_password(password)
        self._password = password

    @property
    def name(self):
        """Gets the name of this BodyUsersRegister.

        User's display name.  # noqa: E501

        :return: The name of this BodyUsersRegister.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BodyUsersRegister.

        User's display name.  # noqa: E501

        :param name: The name of this BodyUsersRegister.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def phone_number(self):
        """Gets the phone_number of this BodyUsersRegister.

        Phone number format.  # noqa: E501

        :return: The phone_number of this BodyUsersRegister.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this BodyUsersRegister.

        Phone number format.  # noqa: E501

        :param phone_number: The phone_number of this BodyUsersRegister.
        :type phone_number: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")  # noqa: E501
        
        format.enforce_phone_number(phone_number)
        self._phone_number = phone_number
