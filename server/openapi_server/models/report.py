# coding: utf-8

from __future__ import absolute_import
from datetime import datetime, timezone  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Report(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, report_id=None, reporter_user_id=None, reported_user_id=None, order_id=None, time=None, message=None, conclusion=None):  # noqa: E501
        """Report - a model defined in OpenAPI

        :param report_id: The report_id of this Report.  # noqa: E501
        :type report_id: str
        :param reporter_user_id: The reporter_user_id of this Report.  # noqa: E501
        :type reporter_user_id: str
        :param reported_user_id: The reported_user_id of this Report.  # noqa: E501
        :type reported_user_id: str
        :param order_id: The order_id of this Report.  # noqa: E501
        :type order_id: str
        :param time: The time of this Report.  # noqa: E501
        :type time: datetime
        :param message: The message of this Report.  # noqa: E501
        :type message: str
        :param conclusion: The conclusion of this Report.  # noqa: E501
        :type conclusion: str
        """
        self.openapi_types = {
            'report_id': str,
            'reporter_user_id': str,
            'reported_user_id': str,
            'order_id': str,
            'time': datetime,
            'message': str,
            'conclusion': str
        }

        self.attribute_map = {
            'report_id': 'report_id',
            'reporter_user_id': 'reporter_user_id',
            'reported_user_id': 'reported_user_id',
            'order_id': 'order_id',
            'time': 'time',
            'message': 'message',
            'conclusion': 'conclusion'
        }

        self._report_id = report_id
        self._reporter_user_id = reporter_user_id
        self._reported_user_id = reported_user_id
        self._order_id = order_id
        self._time = time.replace(tzinfo=timezone.utc) if not None else None
        self._message = message
        self._conclusion = conclusion

    @classmethod
    def from_dict(cls, dikt) -> 'Report':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Report of this Report.  # noqa: E501
        :rtype: Report
        """
        return util.deserialize_model(dikt, cls)

    @property
    def report_id(self):
        """Gets the report_id of this Report.


        :return: The report_id of this Report.
        :rtype: str
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this Report.


        :param report_id: The report_id of this Report.
        :type report_id: str
        """

        self._report_id = report_id

    @property
    def reporter_user_id(self):
        """Gets the reporter_user_id of this Report.

        Identification of a user.  # noqa: E501

        :return: The reporter_user_id of this Report.
        :rtype: str
        """
        return self._reporter_user_id

    @reporter_user_id.setter
    def reporter_user_id(self, reporter_user_id):
        """Sets the reporter_user_id of this Report.

        Identification of a user.  # noqa: E501

        :param reporter_user_id: The reporter_user_id of this Report.
        :type reporter_user_id: str
        """

        self._reporter_user_id = reporter_user_id

    @property
    def reported_user_id(self):
        """Gets the reported_user_id of this Report.

        Identification of a user.  # noqa: E501

        :return: The reported_user_id of this Report.
        :rtype: str
        """
        return self._reported_user_id

    @reported_user_id.setter
    def reported_user_id(self, reported_user_id):
        """Sets the reported_user_id of this Report.

        Identification of a user.  # noqa: E501

        :param reported_user_id: The reported_user_id of this Report.
        :type reported_user_id: str
        """

        self._reported_user_id = reported_user_id

    @property
    def order_id(self):
        """Gets the order_id of this Report.

        Identification of the order.  # noqa: E501

        :return: The order_id of this Report.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this Report.

        Identification of the order.  # noqa: E501

        :param order_id: The order_id of this Report.
        :type order_id: str
        """

        self._order_id = order_id

    @property
    def time(self):
        """Gets the time of this Report.


        :return: The time of this Report.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Report.


        :param time: The time of this Report.
        :type time: datetime
        """

        self._time = time.replace(tzinfo=timezone.utc) if not None else None

    @property
    def message(self):
        """Gets the message of this Report.


        :return: The message of this Report.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Report.


        :param message: The message of this Report.
        :type message: str
        """

        self._message = message

    @property
    def conclusion(self):
        """Gets the conclusion of this Report.


        :return: The conclusion of this Report.
        :rtype: str
        """
        return self._conclusion

    @conclusion.setter
    def conclusion(self, conclusion):
        """Sets the conclusion of this Report.


        :param conclusion: The conclusion of this Report.
        :type conclusion: str
        """

        self._conclusion = conclusion
