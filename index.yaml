openapi: '3.0.0'
info:
  version: '1.0.0'
  title: 'UniBar API'
  description: API definition for interacting with the back-end system.

servers:
  - url: http://localhost
    description: Local test server.
  - url: http://dev.unibar.xyz
    description: Developement server.
  - url: http://prod.unibar.xyz
    description: Production server.

paths:
  /ping:
    summary: Pings the server.
    get:
      responses:
        200:
          description: Successful ping from the server.
          content:
            text/plain:
              schema:
                type: string

  /deployment:
    summary: States what type of deployment type this server is.
    get:
      responses:
        200:
          description: Type of deployment (e.g. development, production, testing)
          content:
            text/plain:
              schema:
                type: string
  
  /message:
    summary: Send a message to UniBar.
    post:
      requestBody:
        description: Send an arbitrary message to UniBar with name and message being optional. Email or user ID can be specified to help get back in contact with the message sender.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - message
              properties:
                user_id:
                  $ref: "#/components/schemas/UserID"
                email:
                  $ref: "#/components/schemas/Email"
                name:
                  type: string
                message:
                  type: string            
      responses:
        200:
          description: Successfully sent a message to UniBar.
        400:
          description: Failed to send a message to UniBar.

  /users/register:
    summary: Registering a user.
    post:
      summary: Create a new user.
      requestBody:
        description: Specify the basic and mandatory fields to create a new user (email, password, name, phone_number).  
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
                - phone_number
              properties:
                email:
                  $ref: "#/components/schemas/Email"
                password:
                  $ref: "#/components/schemas/Password"
                name:
                  $ref: "#/components/schemas/Name"
                phone_number:
                  $ref: "#/components/schemas/PhoneNumber"
      responses:
        200:
          description: Successfully registered a new user.
        400:
          description: Failed to register a new user.
        403:
          description: User already exists.
          
  /users/login:
    summary: Logging in a user.
    post:
      summary: Log in a user. Set cookie auth token.
      requestBody:
        description: Credentials of the user to log in. Email and password required for logging in the user.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - email
              - password
              properties:
                email:
                  $ref: "#/components/schemas/Email"
                password:
                  $ref: "#/components/schemas/Password"
      responses:
        200:
          description: Successfully logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserID"
        400:
          description: Failed to log in user.

  /user/update:
    summary: Update user information.
    put:
      security:
        - UserAuth: []
      requestBody:
        description: Information about the user to change. For changing the user's name, password, phone_number, and etransfer_email.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                # Email should not be changeable
                name:
                  $ref: "#/components/schemas/Name"
                password:
                  $ref: "#/components/schemas/Password"
                phone_number:
                  $ref: "#/components/schemas/PhoneNumber"
                etransfer_email:
                  $ref: "#/components/schemas/Email"
      responses:
        200:
          description: Successfully updated user information.
        400:
          description: Failed to update user information.

  /user/info:
    summary: Get public information about the user.
    get:
      security:
        - UserAuth: []
        - AdminAuth: []
      requestBody:
        description: User ID of the user to identify who.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                user_id:
                  $ref: "#/components/schemas/UserID"
      responses:
        200:
          description: Successfully fetched user's public information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Failed to fetch user's public information.

  /user/orders/delivering:
    summary: Fetch the user's orders that they are claiming to be delivering.
    get:
      security:
        - UserAuth: []
        - AdminAuth: []
      requestBody:
        description: User ID of which we want to see their orders currently being delivered.  
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                user_id:
                  $ref: "#/components/schemas/UserID"
      responses:
        200:
          description: Succesfully fetched user's claimed orders to be delivering.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        400:
          description: Failed to fetch user's claimed orders to be delivering.

  /user/orders/requesting:
    summary: Fetch the user's order that they are requesting.
    get:
      security:
        - UserAuth: []
        - AdminAuth: []
      requestBody:
        description: User ID of which we want to see the orders they are requesting.  
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                user_id:
                  $ref: "#/components/schemas/UserID"
      responses:
        200:
          description: Succesfully fetched user's active orders.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        400:
          description: Failed to fetch user's active delivery requests.

  /user/order/request:
    summary: Create a new delivery request.
    post:
      security:
        - UserAuth: []
      requestBody:
        description: Delivery request order which the user wishes to create.  
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - order
              properties:
                order:
                  $ref: "#/components/schemas/Order"
      responses:
        200:
          description: Successfully created a delivery request.
        400:
          description: Failed to create a delivery request.

  /user/order/deliver:
    summary: Indicate which order the user intends to fulfill.
    put:
      security:
        - UserAuth: []
      requestBody:
        description: Delivery request order which the user is requesting to deliver.  
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - order_id
              properties:
                order_id:
                  $ref: "#/components/schemas/OrderID"
      responses:
        200:
          description: Succesfully indicated that user intends to fulfill the order.
        400:
          description: Could not fulfil the order.
        409:
          description: Order is currently being fulfilled by another user.

  /user/order/report:
    summary: Reports another user in the context of the order.
    post:
      security:
        - UserAuth: []
      requestBody:
        description: Details about the order and user involved in the report. Includes a message.    
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - order_id
                - reported_id
                - message
              properties:
                order_id:
                  $ref: "#/components/schemas/OrderID"
                reported_id:
                  $ref: "#/components/schemas/UserID"
                message:
                  type: string
      responses:
        200:
          description: Successfully reported the user.
        400:
          description: Failed to report the user.

  /user/order/complete:
    summary: Completes the order and performs necessary delivery-token transfer from food receiver to deliverer.
    put:
      security:
        - UserAuth: []
      requestBody:
        description: The ID of the order being marked as complete.  
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - order_id
              properties:
                order_id:
                  $ref: "#/components/schemas/OrderID"
      responses:
        200:
          description: Successfully completed the order and transfered the delivery-token from food receiver to the deliverer.
        400:
          description: Failed to complete the order and transfer the delivery-token from the food receiver to the deliverer.

  /orders/available:
    summary: Lists all orders currently available to fulfill.
    get:
      responses:
        200:
          description: Successfully fetched orders available to fulfill.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        400:
          description: Failed to fetch orders available to fulfill.

  /order/{order_id}:
    summary: Fetch a specific order.
    parameters:
      - in: path
        name: order_id
        description: The ID of the order which the client wants to see its info.
        required:
          - order_id
        schema:
          $ref: "#/components/schemas/OrderID"
    get:
      responses:
        200:
          description: Successfully fetched order.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        400:
          description: Failed to fetch orders.

  /admin/login:
    summary: Logs in the admin. Sets token in cookies.
    post:
      requestBody:
        description: Admin login API token.
        content:
          application/json:
            schema:
              type: object
              required:
                - admin_token
              properties:
                admin_token:
                  type: string
                  format: password
      responses: 
        200:
          description: Successfulled logged in the admin.
        400:
          description: Failed to log in the admin.

  /admin/users/list:
    summary: Lists all users.
    get:
      security:
        - AdminAuth: []
      responses:
        200:
          description: Succesfully fetched all users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        400:
          description: Failed to fetch all users.

  /admin/orders/list:
    summary: Lists all orders.
    get:
      security:
        - AdminAuth: []
      responses:
        200:
          description: Succesfully fetched all orders.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        400:
          description: Failed to fetch all orders.

  /admin/reports/list:
    summary: Lists all user reports.
    get:
      security:
        - AdminAuth: []
      responses:
        200:
          description: Succesfully fetched all reports.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        400:
          description: Failed to fetch all orders.
  
  /admin/messages/list:
    summary: Lists all messages.
    get:
      security:
        - AdminAuth: []
      responses:
        200:
          description: Succesfully fetched all messages.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"
        400:
          description: Failed to fetch all messages.

components:
  schemas:
    UserID:
      description: Identification of a user.
      type: string
      format: uuid
    Name:
      description: User's display name.
      type: string
    Email:
      description: Email format.
      type: string
      format: email
    PhoneNumber:
      description: Phone number format.
      type: string
      pattern: ^\d{10}$
    Password:
      description: Password format.
      type: string
      format: password
    DeliveryTokens:
      description: Delivery token count.
      type: integer
      format: int32
    User:
      description: Public-safe user definition.
      type: object
      properties:
        user_id:
          $ref: "#/components/schemas/UserID"
        name:
          $ref: "#/components/schemas/Name"
        email:
          $ref: "#/components/schemas/Email"
        phone_number:
          $ref: "#/components/schemas/PhoneNumber"
        registered_time:
          type: string
          format: date-time
        delivery_tokens:
          $ref: "#/components/schemas/DeliveryTokens"
        etransfer_email:
          $ref: "#/components/schemas/Email"
    OrderID:
      description: Identification of the order.
      type: string
      format: uuid
    Order:
      description: Content of the order.
      type: object
      properties:
        order_id:
          $ref: "#/components/schemas/OrderID"
        orderer_id:
          $ref: "#/components/schemas/UserID"
        deliverer_id:
          $ref: "#/components/schemas/UserID"
        creation_time:
          type: string
          format: date-time
        deadline_time:
          type: string
          format: date-time
        claimed_time:
          type: string
          format: date-time
        delivered_time:
          type: string
          format: date-time
        order:
          type: string
        source:
          type: string
        destination:
          type: string
        payment_method:
          type: string
          enum:
            - cash
            - etransfer
        status:
          type: string
          enum:
            - available
            - claimed
            - delivered
            - cancelled
            - expired
    Message:
      description: A user message to UniBar.
      type: object
      properties:
        message_id:
          type: string
          format: uuid
        user_id:
          $ref: "#/components/schemas/UserID"
        email:
         $ref: "#/components/schemas/Email"
        message:
          type: string
        time:
          type: string
          format: date-time
    Report:
      description: User report.
      type: object
      properties:
        report_id:
          type: string
          format: uuid
        reporter_user_id:
          $ref: "#/components/schemas/UserID"
        reported_user_id:
          $ref: "#/components/schemas/UserID"
        order_id:
          $ref: "#/components/schemas/OrderID"
        time:
          type: string
          format: date-time
        message:
          type: string
        conclusion:
          type: string
  
  securitySchemes:
    UserAuth:
      type: apiKey
      in: cookie
      name: user_token
    AdminAuth:
      type: apiKey
      in: header
      name: admin_token